# -*- coding: utf-8 -*-

# Author: Annie Dequit
#
# Created by: PyQt5 UI 
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QStringListModel, Qt
from PyQt5.QtWidgets import QMainWindow, QAction, QMenuBar, QMessageBox, QProgressBar,QMenu
from PyQt5.QtGui import QFont
from DirectoryModel import DirProxyModel, PandasModel
from uiStructure import Ui_mainWindow
import os,sys,re
import warnings

from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT
from matplotlib.figure import Figure
from plotly.subplots import make_subplots
import plotly.graph_objects as go
from plotly.figure_factory import create_distplot

warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=UserWarning)
warnings.filterwarnings("ignore", category=FutureWarning)

import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt
from matplotlib.axes import Subplot as plt

import seaborn as sns
sns.set()
from PIL import Image
import torch
import torch.nn as nn
import torch.optim as optim
# from torch.optim.lr_scheduler import ReduceLROnPlateau, StepLR, CyclicLrR
import torchvision
from torchvision import datasets, models, transforms
from torch.utils.data import Dataset, DataLoader
import torch.nn.functional as F

from sklearn.model_selection import train_test_split, StratifiedKFold
from sklearn.utils.class_weight import compute_class_weight

from glob import glob
from skimage.io import imread
from os import listdir

import time
import copy
from tqdm import tqdm_notebook as tqdm
 
from plotly.graph_objs import *
import plotly.express as px




class Main(QtWidgets.QMainWindow, Ui_mainWindow):
    # send_fig = QtCore.pyqtSignal(str)

    def __init__(self):
        QtWidgets.QMainWindow.__init__(self)
        self.setupUi(self)

        self.base_path= "C:/Users/a_ade/Desktop/Files/Capstone/Breast_Cancer/breast-histopathology-images/IDC_regular_ps50_idx5/"
        self.folders_list = listdir(self.base_path)
#====================================================
#=================Functions=========================   
# 
    def progressbarAnimation(self,pB): 
        #setting for loop to set value of progress bar
        for i in range(25):
            # slowing down the loop
            time.sleep(0.01)
            # setting value to progress bar
            pB.setValue(i) 


#=========================================================
    def progressbarAnimation2(self,pB): 
        #setting for loop to set value of progress bar
        for i in range(25):
            # slowing down the loop
            time.sleep(0.01)
            # setting value to progress bar
            pB.setValue(i) 



#====================================================
  #function for Qfiledialog that let user select folders but also view what's in it , 
  # this is connected to the Object OOP imported above from another python file "DirProxyModel" 
    def selectDirectory(self):
        print("browse folder button was pressed")
        file_filter = 'All files(*.*);; Images files(*.png) ;;';
        dialog = QtWidgets.QFileDialog(
        parent=self,
        caption= "Select folder",
        directory= os.getcwd(),
        filter= file_filter,           # shows dialog box and return the path
                )       
        dialog.setDirectory("C:/Users/a_ade/Desktop/Files/Capstone/Breast_Cancer/breast-histopathology-images/IDC_regular_ps50_idx5/")
        dialog.setFileMode(dialog.Directory)
        dialog.setOptions(dialog.DontUseNativeDialog) 
        
        #**********************************************************
        #to show folders containing files but not clickable
        # find the underlying model and set our own proxy model for it
        for view in self.findChildren(QtWidgets.QAbstractItemView):
        # try to hide the file filter combo
            fileTypeCombo = dialog.findChild(QtWidgets.QComboBox, 'fileTypeCombo')
            if fileTypeCombo:
                fileTypeCombo.setVisible(False)
                dialog.setLabelText(dialog.FileType, '')            
            view.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection) 

            # we used OOP object here (DirProxyModel)
            if isinstance(view.model(), QtWidgets.QFileSystemModel):             
                    proxyModel = DirProxyModel(view.model())       
                    dialog.setProxyModel(proxyModel)

        if dialog.exec_():
            #this is to print the folder's path in Qlistwidget    
            self.folders= dialog.selectedFiles()
            for i in range(len(self.folders)):
                if self.folders is None: 
                        pass
               
                else: 
                    
                     #this is to print the folders path in Qlistwidget and also to save table in database 

                #     print(self.folders[i]) 
                 
                    self.BigScreenWidget.setVisible(False)
                    self.plottingLeftWidget.setVisible(False)
                    self.plottingRightWidget.setVisible(False)
                    self.middleLabel.setVisible(False)
                    
          

                    self.progressBar.setVisible(True)
                    self.progressbarAnimation(self.progressBar)


#***************************This code is to print the directory path and make a pandas dataframe of it then output into a .csv file
    #                 f=(str(self.folders))
    #                 f2 =  re.sub(r"[\([{})'\]]", "", f)
    #                 folder = listdir(f2)
    #                 base_path= "C:/Users/a_ade/Desktop/Files/Capstone/Breast_Cancer/breast-histopathology-images/IDC_regular_ps50_idx5/"
              

    #                 total_images= 0

    #                 for n in range(len(folder)):
    #                     patient_id = folder[n]
                        
    #                     for c in [0, 1]:
    #                             patient_path = base_path + patient_id 
    #                             class_path = patient_path + "/" + str(c) + "/"
    #                             subfiles = listdir(class_path)
    #                             total_images += len(subfiles)

    #    ## ============================making dataframe of the images directory path
    #                 data = pd.DataFrame(index=np.arange(0, total_images), columns=["patient_id", "path", "target"])

    #                 k = 0
    #                 for n in range(len(folder)):
    #                     patient_id = folder[n]
                        
    #                     patient_path = base_path + patient_id 
    #                     for c in [0,1]:
    #                         class_path = patient_path + "/" + str(c) + "/"
    #                         subfiles = listdir(class_path)
    #                         for m in range(len(subfiles)):
    #                             image_path = subfiles[m]
    #                             # class_path +image_path
    #                             data.iloc[k]["path"] =   class_path + image_path
    #                             data.iloc[k]["target"] = c
    #                             data.iloc[k]["patient_id"] = patient_id
    #                             k += 1  

                      
    #                 print("dataframe for path created")
    #                 self.file = []
    #                 self.file.append(self.folders)
    #                 self.f = str(self.file[0])

    #                 data.to_csv('testoutput.csv', mode='a',index=False, header=not os.path.exists('testoutput.csv'))
#**************************====================================================================    

                    self.path =  'C:/Users/a_ade/Desktop/Files/Capstone/Breast_Cancer/testoutput.csv'
                    self.df = pd.read_csv(self.path)
                                  
                    self.df2= self.df
                    model = PandasModel(self.df2)
                    self.tableView.setModel(model)
                    self.tableView.resizeColumnsToContents()
                    self.tableView.setVisible(True)
                    
                    self.progressBar.setVisible(False)
                    self.labelWithPhoto.setVisible(False)
#================================================================================
    def getdataCounts(self):
        print("Printing data counts")
        total_images = 0
        for n in range(len(self.folders_list)):
            patient_id =  self.folders_list[n]
            for c in [0, 1]:
                patient_path = self.base_path + patient_id 
                class_path = patient_path + "/" + str(c) + "/"
                subfiles = listdir(class_path)
                total_images += len(subfiles)

        self.labelWithPhoto.setVisible(True)
        self.middleLabel.setVisible(True)
        self.BigScreenWidget.setVisible(False)
        self.plottingLeftWidget.setVisible(False)
        self.plottingRightWidget.setVisible(False)
        self.tableView.setVisible(False)
     
        self.middleLabel.setText("Total number of images: " + str(total_images))
        print("Total number of images: " + str(total_images))
               
 #===================================================================             
    def showUploadedFilesFunction(self):
            print("Show uploaded files path")
            self.labelWithPhoto.setVisible(True)   
            self.BigScreenWidget.setVisible(False)
            self.plottingLeftWidget.setVisible(False)
            self.plottingRightWidget.setVisible(False)
            self.middleLabel.setVisible(False)
      
            self.progressBar.setVisible(True)
            self.progressbarAnimation(self.progressBar)
            self.progressBar.setVisible(False)       

            pathfiles =  'C:/Users/a_ade/Desktop/Files/Capstone/Breast_Cancer/testoutput.csv'
            self.df3 = pd.read_csv(pathfiles)
                
            self.df4= self.df3
            model = PandasModel(self.df4)
            self.tableView.setModel(model)
            self.tableView.resizeColumnsToContents()
            self.progressBar2.setVisible(False)

            self.tableView.setVisible(True)
            self.labelWithPhoto.setVisible(False)

#==============================================================================

    def plott3(self):
        self.labelWithPhoto.setVisible(False)
        
#==============================================================================
    def extract_coords(self,df):
        coord = df.path.str.rsplit("_", n=4, expand=True)
        coord = coord.drop([0, 1, 4], axis=1)
        coord = coord.rename({2: "x", 3: "y"}, axis=1)
        coord.loc[:, "x"] = coord.loc[:,"x"].str.replace("x", "", case=False).astype(np.int)
        coord.loc[:, "y"] = coord.loc[:,"y"].str.replace("y", "", case=False).astype(np.int)
        df.loc[:, "x"] = coord.x.values
        df.loc[:, "y"] = coord.y.values
        return df

    def get_cancer_dataframe(self,patient_id, cancer_id):
        path = self.base_path + patient_id + "/" + cancer_id
        files = listdir(path)
        dataframe = pd.DataFrame(files, columns=["filename"])
        path_names = path + "/" + dataframe.filename.values
        dataframe = dataframe.filename.str.rsplit("_", n=4, expand=True)
        dataframe.loc[:, "target"] = np.int(cancer_id)
        dataframe.loc[:, "path"] = path_names
        dataframe = dataframe.drop([0, 1, 4], axis=1)
        dataframe = dataframe.rename({2: "x", 3: "y"}, axis=1)
        dataframe.loc[:, "x"] = dataframe.loc[:,"x"].str.replace("x", "", case=False).astype(np.int)
        dataframe.loc[:, "y"] = dataframe.loc[:,"y"].str.replace("y", "", case=False).astype(np.int)
        return dataframe

    def get_patient_dataframe(self,patient_id):
        df_0 = self.get_cancer_dataframe(str(patient_id), "0")
        df_1 = self.get_cancer_dataframe(str(patient_id), "1")
        patient_df = df_0.append(df_1)
        return patient_df


    def visualizeBreastTissueSlice_Function(self):
        print("Visualizing breast tissue slice")
        self.hideWidgets()
        self.BigScreenWidget.setVisible(True)
        self.mpl_CanvasToPlot3.setVisible(True)
        self.labelWithPhoto.setVisible(False)
        self.mpl_CanvasToPlot2.setVisible(False)
        self.plottingLeftWidget.setVisible(False)
        self.plottingRightWidget.setVisible(False)

        example = self.get_patient_dataframe(self.df.patient_id.values[0])

        patient_ids = self.df.patient_id.unique()

        for row in range(5):
            for col in range(3):
                patient_id = patient_ids[col + 3*row]
                example_df = self.get_patient_dataframe(patient_id)
                
                self.mpl_CanvasToPlot3.ax[row,col].scatter(example_df.x.values, example_df.y.values, c=example_df.target.values, cmap="autumn", s=20);
                self.mpl_CanvasToPlot3.ax[row,col].set_title("patient " + str(patient_id))
                self.mpl_CanvasToPlot3.ax[row,col].set_xlabel("y coord")
                self.mpl_CanvasToPlot3.ax[row,col].set_ylabel("x coord")
                self.mpl_CanvasToPlot3.canvas.draw_idle()  


#==============================================================================
#==============================================================================

    def breastTissuePatches_Function(self):
        print("Viewing breast tissue patches")

        self.hideWidgets()
        self.labelWithPhoto.setVisible(False)
        self.mpl_CanvasToPlot2.setVisible(False)
        self.mpl_CanvasToPlot.setVisible(False)
        self.plottingLeftWidget.setVisible(True)
        self.plottingRightWidget.setVisible(True)

        #df is the path of the microscopic images, variable declare at uIStructure.py file
        self.df.target = self.df.target.astype(np.int)
        pos_selection = np.random.choice(self.df[self.df.target==1].index.values, size=35, replace=False)
        neg_selection = np.random.choice(self.df[self.df.target==0].index.values, size=35, replace=False)

        # self.mpl_CanvasToPlot.figure.clear()
        for row in range(5):
           for col in range(7):
                idx = pos_selection[col + 7*row]
                image = imread(self.df.loc[idx, "path"])

                self.mpl_LeftCanvasToPlot.ax[row,col].imshow(image)
                self.mpl_LeftCanvasToPlot.ax[row,col].grid(False)
                self.mpl_LeftCanvasToPlot.ax[row,col].axis('off')
                self.mpl_LeftCanvasToPlot.canvas.draw_idle()     
        self.mpl_LeftCanvasToPlot.figure.suptitle("Cancer patches", x=0.3 )    
                
        for row in range(5):
               for col in range(7):
                idx = neg_selection[col + 7*row]
                image = imread(self.df.loc[idx, "path"])

                self.mpl_RightCanvasToPlot.ax[row,col].cla()  
                self.mpl_RightCanvasToPlot.ax[row,col].imshow(image)
                self.mpl_RightCanvasToPlot.ax[row,col].grid(False)
                self.mpl_RightCanvasToPlot.ax[row,col].axis('off')
                self.mpl_RightCanvasToPlot.canvas.draw_idle()
        self.mpl_RightCanvasToPlot.figure.suptitle("Healthy patches", x = 0.3)    
       
  #=============================================================================      
    def hideWidgets(self):
        #hiding some widgets
            self.labelWithPhoto.setVisible(True)
            self.middleLabel.setVisible(False)
            self.plottingLeftWidget.setVisible(False)
            self.plottingRightWidget.setVisible(False)
            self.tableView.setVisible(False)
            self.mpl_CanvasToPlot2.setVisible(False)
            self.BigScreenWidget.setVisible(False)

            self.progressBar.setVisible(True)
            self.progressbarAnimation(self.progressBar)
            self.progressBar.setVisible(False)
    

#==============================================================================

    def reviewPatches_Function(self):
        print("Reviewing patches")
        self.BigScreenWidget.setVisible(True)
        self.labelWithPhoto.setVisible(False)
        self.middleLabel.setVisible(False)
        self.plottingLeftWidget.setVisible(False)
        self.plottingRightWidget.setVisible(False)
        self.tableView.setVisible(False)
        self.mpl_CanvasToPlot2.setVisible(False)

        self.mpl_CanvasToPlot2.setVisible(True)
   
        # #=====================================================
        # #making subplots
        fig = make_subplots(rows=1, cols=3,
                  specs=[[{"secondary_y": True}, {"secondary_y": True},
                  {"secondary_y": True}]
                        ])
        # #=====================================================
        # #1st column axes
        fig.add_trace(
            go.Histogram(x=self.df.groupby("patient_id").size(), name="# of patches", showlegend=False),
            row=1, col=1, secondary_y=False,
        )
            
        # #=====================================================
        # #2nd column axes
        cancer_perc = self.df.groupby("patient_id").target.value_counts()/ self.df.groupby("patient_id").target.size()
        cancer_perc = cancer_perc.unstack()

        fig.add_trace(
           go.Histogram(x=(cancer_perc.loc[:, 1]*100), name="% of patches w/ IDC", showlegend=False),
            row=1, col=2, secondary_y=False,
        )
        
        # #=====================================================
        # #3rd column axes
        fig.add_trace(

               
           go.Histogram(x=self.df.target, name="no(0) versus yes(1)", showlegend=False),
            row=1, col=3, secondary_y=False,
        )
     
        
        fig.update_xaxes(row=1, col=1,title_text="Number of patches")
        fig.update_xaxes(row=1, col=2,title_text= "% of patches w/ IDC")
        fig.update_xaxes(row=1, col=3,title_text="no(0) versus yes(1)")

        fig.update_yaxes(row=1, col=1,title_text="Frequency")
        fig.update_yaxes(row=1, col=2,title_text="Frequency")
        fig.update_yaxes(row=1, col=3,title_text="Count")

        fig.update_layout(title='How many patches do we have per patient?                                 How much percentage of an image is covered by IDC?                                    How many patches show IDC ', bargap=0.03,title_font_size= 12, title_font_color='rgb(0,0,0)')

        self.mpl_CanvasToPlot2.setHtml(fig.to_html(include_plotlyjs='cdn'))
        self.mpl_CanvasToPlot2.resize(1390,750)
        
#==============================================================================
    def retranslateUi(self, mainWindow):
        _translate = QtCore.QCoreApplication.translate
        mainWindow.setWindowTitle(_translate("mainWindow", "GVEO "))
        self.labelMainTitle.setText(_translate("mainWindow", "        MACHINE LEARNING  - Breast Cancer Prediction"))
        self.labelTitleCNN.setText(_translate("mainWindow", "Convolutional neural network"))
        self.uploadFilesbutton.setText(_translate("mainWindow", "Upload files"))
        self.uploadfilesLabel.setText(_translate("mainWindow", "Upload path (cell tissue images) "))
        self.EDALabel.setText(_translate("mainWindow", "     EXPLORATORY DATA ANALYSIS      "))
        self.showUploadedFilesButton.setText(_translate("mainWindow", "Show uploaded files"))
        self.dataCounts.setText(_translate("mainWindow", "Data counts"))
        self.reviewPatches.setText(_translate("mainWindow", "Review Patches"))
        self.visualizeBinary.setText(_translate("mainWindow", "Visualize  breast tissue slice (binary target)"))
        self.visualizeBreastTissue.setText(_translate("mainWindow", "Visualize  breast tissue images"))
        self.viewBreastTissueLabel.setText(_translate("mainWindow", "          VIEW TISSUES       "))
        self.breastTissuePatches.setText(_translate("mainWindow", " breast tissue patches (cancerous and healthy)"))
        self.machineLearningModelLabel.setText(_translate("mainWindow", "     MACHINE LEARNING (CNN)      "))
        self.CNNimageDatasets.setText(_translate("mainWindow", "CNN - Create breast tissue image datasets"))
        self.trainDevTest.setText(_translate("mainWindow", "View train data, dev data, test data"))
        self.scanBreastTissueImages.setText(_translate("mainWindow", "Scan patient\'s breast tissue images"))
        self.searchPatientID.setPlaceholderText(_translate("mainWindow", "   Enter Patient ID..."))
        self.predictionResult.setText(_translate("mainWindow", "Get Prediction Result"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("mainWindow", "Table"))
        self.uploadCSV.setText(_translate("mainWindow", "Upload CSV"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("mainWindow", " Plots"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("mainWindow", "Page"))


   ##==========Attaching the functions to the buttons when clicked===========================================
        self.uploadFilesbutton.clicked.connect(self.selectDirectory)
        self.showUploadedFilesButton.clicked.connect(self.showUploadedFilesFunction)
        self.dataCounts.clicked.connect(self.getdataCounts)
        self.reviewPatches.clicked.connect(self.reviewPatches_Function)
        self.breastTissuePatches.clicked.connect(self.breastTissuePatches_Function)
        self.visualizeBinary.clicked.connect(self.visualizeBreastTissueSlice_Function)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    mainWindow = QtWidgets.QWidget()
    ui = Main()
    ui.setupUi(mainWindow)
    mainWindow.show()
    sys.exit(app.exec_())
